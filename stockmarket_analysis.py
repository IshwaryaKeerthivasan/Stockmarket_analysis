# -*- coding: utf-8 -*-
"""Stockmarket analysis Amazon .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qHD5MBcF235Fmsxvg_isdut3HWCjsxqe

# Amazon Stock market Analysis

## This Project focuses on getting to know about yfinance and analyze company's stock market.

Step1: Look for the yfinance website and check for data and decide wheather it is suitable for your analysis.

Step2: Install and load the necessary libraries .

Step3: Load the data and prepare them for further analyses.

# Install and load libraries
"""

import sys
print(sys.version)

!pip install yfinance

# Commented out IPython magic to ensure Python compatibility.
!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
!tar -xvzf ta-lib-0.4.0-src.tar.gz
# %cd ta-lib
!./configure --prefix=/usr
!make
!make install
!pip install TA-Lib

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import talib
import plotly.express as px
import plotly.graph_objects as go

"""# Look for the data and choose the company that you want to analyze. Further Load that data with the required columns."""

ticket_symbol = "AMZN"

amazon_data = yf.Ticker(ticket_symbol)

historical_data = amazon_data.history(period="1y")
historical_data.head()

"""# Amazon Stock Price Analysis - Loading and Preprocessing"""

amazon_share_price_data=amazon_data.history(period='max')
amazon_share_price_data.head()

amazon_share_price_data.reset_index(inplace=True)

amazon_share_price_data.dtypes

amazon_share_price_data.isnull().any()

"""# Visual representation of the Amazon's financial performance over time"""

# Create a Plotly express line chart
fig = px.line(amazon_share_price_data, x='Date', y='Open', title='Amazon Opening Stock Price')

# Customize the line color to red
fig.update_traces(line=dict(color='red'))

# Calculate the average opening price to represent an increase
average_open_price = amazon_share_price_data['Open'].mean()

# Add a straight line to indicate the increase
fig.add_shape(
    type="line",
    x0=amazon_share_price_data['Date'].min(),
    x1=amazon_share_price_data['Date'].max(),
    y0=average_open_price,
    y1=average_open_price,
    line=dict(color="green", width=2, dash="dash")
)

# Show the plot
fig.show()

# Create a Plotly express line chart
fig = px.line(amazon_share_price_data, x='Date', y='Close', title='Amazon Closing Stock Price')

# Customize the line color to red
fig.update_traces(line=dict(color='green'))

# Calculate the average opening price to represent an increase
average_open_price = amazon_share_price_data['Close'].mean()

# Add a straight line to indicate the increase
fig.add_shape(
    type="line",
    x0=amazon_share_price_data['Date'].min(),
    x1=amazon_share_price_data['Date'].max(),
    y0=average_open_price,
    y1=average_open_price,
    line=dict(color="red", width=2, dash="dash")
)

# Show the plot
fig.show()

# Filter data for the last 6 months
six_months_ago = pd.to_datetime('today', utc=True) - pd.DateOffset(months=6)
last_6_months = amazon_share_price_data.loc[amazon_share_price_data['Date'] >= six_months_ago].copy()

# Calculate daily profit/loss
last_6_months['Profit/Loss'] = last_6_months['Close'] - last_6_months['Open']

# Create a Bar chart for profit and loss
fig = go.Figure()

fig.add_trace(go.Bar(x=last_6_months['Date'],
                     y=last_6_months['Profit/Loss'],
                     marker_color=last_6_months['Profit/Loss'].apply(lambda x: 'rgba(0, 255, 0, 0.7)' if x > 0 else 'rgba(255, 0, 0, 0.7)')))

fig.update_layout(title='Profit and Loss for the Last 6 Months',
                  xaxis_title='Date',
                  yaxis_title='Profit/Loss',
                  xaxis_rangeslider_visible=False)

fig.show()

"""The Amazon has experienced fluctuations in their profit and loss over the last 6 months. Recently, as per November 17, 2023, it has closed with the profit of 2.519989.

# Analyze the trend over time  - Long and Short time SMA for further understanding
"""

# Calculate simple moving averages (SMA)
historical_data['SMA_50'] = historical_data['Close'].rolling(window=50).mean()
historical_data['SMA_200'] = historical_data['Close'].rolling(window=200).mean()

# Fetch historical stock data for a specific time period
historical_data = amazon_data.history(period="5y")

# Calculate the RSI using TA-Lib
historical_data['RSI'] = talib.RSI(historical_data['Close'], timeperiod=14)

# Calculate the 50-day and 200-day simple moving averages with a rolling window
historical_data['SMA_50'] = historical_data['Close'].rolling(window=50).mean()
historical_data['SMA_200'] = historical_data['Close'].rolling(window=200).mean()

# Drop rows with missing values after calculating moving averages
historical_data.dropna(inplace=True)

# Create a figure
fig = go.Figure()

# Add a trace for stock price (red)
fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['Close'], mode='lines', name='Stock Price', line=dict(color='green')))

# Add a trace for 50-Day SMA (green)
fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['SMA_50'], mode='lines', name='50-Day SMA', line=dict(color='red')))

# Customize the layout
fig.update_layout(
    title=f"Stock Price and 50-Day SMA for {ticket_symbol}",
    xaxis_title="Date",
    yaxis_title="Price",
    showlegend=True
)

# Show the interactive plot
fig.show()

# Create a figure
fig = go.Figure()

# Add a trace for stock price (blue)
fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['Close'], mode='lines', name='Stock Price', line=dict(color='blue')))

# Add a trace for 50-Day SMA (red)
fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['SMA_50'], mode='lines', name='50-Day SMA', line=dict(color='green')))

# Add a trace for 200-Day SMA (green)
fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['SMA_200'], mode='lines', name='200-Day SMA', line=dict(color='red')))

# Customize the layout
fig.update_layout(
    title=f"Stock Price Analysis for {ticket_symbol}",
    xaxis_title="Date",
    yaxis_title="Price",
    showlegend=True
)

# Show the interactive plot
fig.show()

"""Here, the above graph visualizes the long and short period SMA to understand which is a good investment. As per the graph the short period SMA crosses above a long period SMA,  it is suggested to go long.

NOTE: Please note that this is a general interpretation!!

# SMA - 50 Regresion analysis to understand  wheather the stock prizes are in increasing trend or decresing trend.
"""

# Perform a linear regression analysis with statsmodels
X = historical_data[['SMA_50']]
X = sm.add_constant(X)
y = historical_data['Close']

model = sm.OLS(y, X).fit()
print(model.summary())

fig = px.scatter(historical_data, x='SMA_50', y='Close', trendline="ols", title="Scatter Plot with Regression Line")
fig.show()

"""From this we can say that amazon has a increasing trend over the stock prizes."""